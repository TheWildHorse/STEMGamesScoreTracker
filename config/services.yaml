# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    mailer_user: 'test'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    admin.college:
        class: App\Admin\CollegeAdmin
        arguments: [~, App\Entity\College, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: College }
        public: true

    admin.sport:
        class: App\Admin\SportAdmin
        arguments: [~, App\Entity\Sport, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Sport }
        public: true

    admin.group:
        class: App\Admin\GroupAdmin
        arguments: [~, App\Entity\Group, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Group }
        public: true

    admin.event:
        class: App\Admin\EventAdmin
        arguments: [~, App\Entity\Event, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Event }
        public: true

    admin.score:
        class: App\Admin\ScoreAdmin
        arguments: [~, App\Entity\Score, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Score }
        public: true

    admin.scorekeeperauth:
        class: App\Admin\ScorekeeperAuthenticationAdmin
        arguments: [~, App\Entity\ScorekeeperAuthentication, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Scorekeepers }
        public: true